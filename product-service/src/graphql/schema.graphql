type Product {
  id: ID!
  name: String!
  description: String!
  price: Float!
  stock: Int!
  categoryId: ID!
  category: Category
  isAvailable: Boolean!
  createdAt: String!
  updatedAt: String!
}

type Category {
  id: ID!
  name: String!
  description: String
  createdAt: String!
  updatedAt: String!
}

input CreateProductInput {
  name: String!
  description: String!
  price: Float!
  stock: Int!
  categoryId: ID!
}

input UpdateProductInput {
  id: ID!
  name: String
  description: String
  price: Float
  stock: Int
  categoryId: ID
}

input ProductFilterInput {
  categoryId: ID
  minPrice: Float
  maxPrice: Float
  inStock: Boolean
  search: String
}

input PaginationInput {
  page: Int = 1
  limit: Int = 10
}

type PaginationInfo {
  currentPage: Int!
  totalPages: Int!
  totalItems: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type ProductConnection {
  products: [Product!]!
  pagination: PaginationInfo!
}

type Query {
  # Get single product by ID
  product(id: ID!): Product
  
  # Get products with filtering and pagination
  products(
    filter: ProductFilterInput
    pagination: PaginationInput
  ): ProductConnection!
  
  # Get products by category
  productsByCategory(
    categoryId: ID!
    pagination: PaginationInput
  ): ProductConnection!
  
  # Search products
  searchProducts(
    query: String!
    pagination: PaginationInput
  ): ProductConnection!
}

type Mutation {
  # Create new product
  createProduct(input: CreateProductInput!): Product!
  
  # Update existing product
  updateProduct(input: UpdateProductInput!): Product!
  
  # Delete product
  deleteProduct(id: ID!): Boolean!
  
  # Update product stock
  updateProductStock(id: ID!, quantity: Int!): Product!
  
  # Reduce product stock (for orders)
  reduceProductStock(id: ID!, quantity: Int!): Product!
}
